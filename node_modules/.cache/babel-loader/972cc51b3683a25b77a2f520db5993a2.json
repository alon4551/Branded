{"ast":null,"code":"var _jsxFileName = \"G:\\\\React_Projects\\\\branded\\\\src\\\\Profile\\\\Profile.js\";\nimport React, { Component } from 'react';\nimport Field from '../Field';\nimport targets from '../targets.json';\n\nclass Profile extends Component() {\n  constructor() {\n    super();\n\n    this.updateUser = (field, value) => {\n      let user = this.state.user;\n\n      switch (field) {\n        case 'firstName':\n          user.firstName = value;\n          break;\n\n        case 'lastName':\n          user.lastName = value;\n          break;\n\n        case 'email':\n          user.email = value;\n          break;\n\n        case 'birthday':\n          user.birthday = value;\n          break;\n\n        case 'gender':\n          user.gender = this.state.genders[value].gender;\n          break;\n\n        case 'password':\n          user.password = value;\n          break;\n      }\n\n      this.setState({\n        user: user\n      });\n    };\n\n    this.onChange = input => {\n      this.updateUser(input.target.id, input.target.value);\n    };\n\n    this.onSubmit = () => {\n      fetch(targets.signup, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.user)\n      }).then(response => {\n        if (response.status === 200) alert('Sign up');else alert('Failed');\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      user: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        birthday: Date.now(),\n        gender: '',\n        password: ''\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["G:/React_Projects/branded/src/Profile/Profile.js"],"names":["React","Component","Field","targets","Profile","constructor","updateUser","field","value","user","state","firstName","lastName","email","birthday","gender","genders","password","setState","onChange","input","target","id","onSubmit","fetch","signup","method","headers","body","JSON","stringify","then","response","status","alert","catch","err","console","log","Date","now","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,iBAApB;;AACA,MAAMC,OAAN,SAAsBH,SAAS,EAA/B,CAAiC;AAC7BI,EAAAA,WAAW,GAAE;AACT;;AADS,SAabC,UAba,GAaF,CAACC,KAAD,EAAOC,KAAP,KAAe;AACtB,UAAIC,IAAI,GAAC,KAAKC,KAAL,CAAWD,IAApB;;AACA,cAAOF,KAAP;AACI,aAAK,WAAL;AACIE,UAAAA,IAAI,CAACE,SAAL,GAAeH,KAAf;AACA;;AACA,aAAK,UAAL;AACIC,UAAAA,IAAI,CAACG,QAAL,GAAcJ,KAAd;AACJ;;AACA,aAAK,OAAL;AACIC,UAAAA,IAAI,CAACI,KAAL,GAAWL,KAAX;AACJ;;AACA,aAAK,UAAL;AACIC,UAAAA,IAAI,CAACK,QAAL,GAAcN,KAAd;AACJ;;AACA,aAAK,QAAL;AACIC,UAAAA,IAAI,CAACM,MAAL,GAAY,KAAKL,KAAL,CAAWM,OAAX,CAAmBR,KAAnB,EAA0BO,MAAtC;AACJ;;AACA,aAAK,UAAL;AACIN,UAAAA,IAAI,CAACQ,QAAL,GAAcT,KAAd;AACJ;AAlBR;;AAoBA,WAAKU,QAAL,CAAc;AAACT,QAAAA,IAAI,EAACA;AAAN,OAAd;AACH,KApCY;;AAAA,SAqCbU,QArCa,GAqCHC,KAAD,IAAS;AACd,WAAKd,UAAL,CAAgBc,KAAK,CAACC,MAAN,CAAaC,EAA7B,EAAgCF,KAAK,CAACC,MAAN,CAAab,KAA7C;AACH,KAvCY;;AAAA,SAwCbe,QAxCa,GAwCJ,MAAI;AACTC,MAAAA,KAAK,CAACrB,OAAO,CAACsB,MAAT,EAAgB;AACjBC,QAAAA,MAAM,EAAC,MADU;AAEjBC,QAAAA,OAAO,EAAC;AAAC,0BAAe;AAAhB,SAFS;AAGjBC,QAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe,KAAKpB,KAAL,CAAWD,IAA1B;AAHY,OAAhB,CAAL,CAKCsB,IALD,CAKMC,QAAQ,IAAE;AACZ,YAAGA,QAAQ,CAACC,MAAT,KAAkB,GAArB,EACIC,KAAK,CAAC,SAAD,CAAL,CADJ,KAGIA,KAAK,CAAC,QAAD,CAAL;AACP,OAVD,EAWCC,KAXD,CAWOC,GAAG,IAAEC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXZ;AAYH,KArDY;;AAET,SAAK1B,KAAL,GAAW;AACPD,MAAAA,IAAI,EAAC;AACDE,QAAAA,SAAS,EAAC,EADT;AAEDC,QAAAA,QAAQ,EAAC,EAFR;AAGDC,QAAAA,KAAK,EAAC,EAHL;AAIDC,QAAAA,QAAQ,EAACyB,IAAI,CAACC,GAAL,EAJR;AAKDzB,QAAAA,MAAM,EAAC,EALN;AAMDE,QAAAA,QAAQ,EAAC;AANR;AADE,KAAX;AAUH;;AA0CDwB,EAAAA,MAAM,GAAE;AACJ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAGH;;AA3D4B;;AA6DjC,eAAerC,OAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport Field from '../Field';\r\nimport targets from '../targets.json';\r\nclass Profile extends Component(){\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            user:{\r\n                firstName:'',\r\n                lastName:'',\r\n                email:'',\r\n                birthday:Date.now(),\r\n                gender:'',\r\n                password:''\r\n            }\r\n        }\r\n    }\r\n    updateUser=(field,value)=>{\r\n        let user=this.state.user;\r\n        switch(field){\r\n            case 'firstName':\r\n                user.firstName=value;\r\n                break;\r\n                case 'lastName':\r\n                    user.lastName=value;\r\n                break;\r\n                case 'email':\r\n                    user.email=value;\r\n                break;\r\n                case 'birthday':\r\n                    user.birthday=value;\r\n                break;\r\n                case 'gender':\r\n                    user.gender=this.state.genders[value].gender;\r\n                break;\r\n                case 'password':\r\n                    user.password=value;\r\n                break;\r\n        }\r\n        this.setState({user:user});\r\n    } \r\n    onChange=(input)=>{\r\n        this.updateUser(input.target.id,input.target.value);\r\n    }\r\n    onSubmit=()=>{\r\n        fetch(targets.signup,{\r\n            method:\"POST\",\r\n            headers:{\"Content-Type\":\"application/json\"},\r\n            body:JSON.stringify(this.state.user)\r\n        })\r\n        .then(response=>{\r\n            if(response.status===200)\r\n                alert('Sign up');\r\n            else\r\n                alert('Failed');\r\n        })\r\n        .catch(err=>console.log(err));\r\n    }\r\n    render(){\r\n        return(<div>\r\n\r\n        </div>);\r\n    }\r\n}\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}